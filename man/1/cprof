.TH CPROF 1
.SH NAME
cprof \- coverage profiling of limbo programs
.SH SYNOPSIS
.B cprof
[
.B -nfer
] [
.BI -m " modname"
] ... [
.BI "cmd arg ..."
]
.SH DESCRIPTION
.I Cprof
is a coverage profiling tool which shows whether lines of limbo source have been
executed or not. It can also show the number of times a line of code has been
executed and can accumulate results over a series of runs if so desired. The source in
question should be compiled with the 
.B -g
flag so that the relevant symbol table files exist.
.PP
The
.B -n
option lists the name of the file along with the line number.
.PP
The
.B -f
option shows the number of times source code is executed rather than simply
indicating coverage.
.PP
The
.B -r
options indicates that the profiling results should be recorded. Any profiled dis file
of the form <name>.dis will have the raw profiling results stored in a file named
<name>.prf. If this file already existed before the run, the results will be added to
this file. The profiling results are not shown when this option is given.
.PP
The
.B -m
option lists the module names which are to be profiled. If none are given, all the
modules loaded by the kernel will be profiled. The name may be the actual name of
the module or its path name.
.PP
The
.B -e
option profiles the module that is loaded first in any following command. In this case
there is no need to give a
.B -m
option as this is added automatically.
.PP
Any remaining arguments are assumed to
specify a command and set of arguments to the command. If this is the case,
.B cprof
will automatically start profiling, run the command to completion and then
stop profiling before either recording the results or showing the profile statistics.
.PP
If no command is given to profile, then
.B cprof
will show the profile statistics from any existing recorded results in .prf files instead.
.PP
.B Cprof
discriminates between different sections of code on the same line. A limbo
for statement, for example, consisting of initialization, condition and step all on the same line
of source code will be dealt with as three separate sections.
.PP
.B Cprof
displays the profile statistics as a list of the limbo source preceded by a line
number and an indication of whether the line was executed or not. For each section
of code on each line, a plus sign indicates that it was executed, a minus sign that
it was not and a question mark indicates that some of the dis instructions associated
with the section of code were executed but some were not. Lines with no
associated dis code do not have an indication. Of course, given the
.B -f
option, the number of times each section is executed is shown instead.
.PP
.SH EXAMPLE
.EX
To profile a particular command
	cprof /dis/math/sieve 100
To profile the same command but restrict attention to its own module (Sieve).
	cprof -m Sieve /dis/math/sieve 100
A shorter version of the above
	cprof -e /dis/math/sieve 100
Make 3 runs recording results as we go
	cprof -e -r /dis/math/sieve 100
	cprof -e -r /dis/math/sieve 1000
	cprof -e -r /dis/math/sieve 10000
Now look at the cumulative results
	cprof -m /dis/math/sieve.dis
.EE
.SH SOURCE
.B /appl/cmd/cprof.b
.SH SEE ALSO
.IR prof (1),
.IR wm-cprof (1),
.IR prof (2),
.IR prof (3)
.SH BUGS
.I Cprof
cannot profile compiled limbo programs.

